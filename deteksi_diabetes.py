# -*- coding: utf-8 -*-
"""deteksi diabetes.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1T9PFtd2hxMyKnLqnZM3pLe3_1BMwZYFw
"""

#import library
import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)

"""# **1. Load and Prepare the Data**
1.1. Load the Dataset
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

data = pd.read_csv('/content/diabetes.csv')

data.head()

data.shape

"""1.2. Examine the Dataset"""

print(data.info())

print(data.head())

print(data.isnull().sum())

"""1.3. Data Cleaning"""

data.tail()

data.columns

"""# **2. Exploratory Data Analysis (EDA)**
2.1. Descriptive Statistics
"""

print(data.describe().T)

"""2.2. Feature Distribution
* Plot histograms for each feature to see the distribution.
"""

import matplotlib.pyplot as plt

features = ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin',
       'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']
data[features].hist(figsize=(10, 8), bins=20, grid=False, edgecolor='black')
plt.suptitle('Histograms of Diabetes Dataset Features')
plt.show()

#df.drop(columns='Id',axis=1,inplace=True)

outcome = data['Outcome'].value_counts().reset_index()
outcome

plt.figure(figsize=(8,8))
plt.pie(outcome['count'],labels=['0','1'],autopct='%1.3f%%',explode=[0,0])
plt.legend(loc='upper left')
plt.show()

"""# **2.3. Pairwise Relationships**
* Use a pairplot to visualize relationships between features.
"""

import seaborn as sns

sns.pairplot(data, hue='Outcome')
plt.title('Pairplot of Diabetes Dataset')
plt.show()

"""# **3. Feature Relationships by Species**
3.1. Boxplots

* Visualize the distribution of features by species using boxplots.
"""

for feature in features:
    plt.figure(figsize=(8, 6))
    sns.boxplot(x='Outcome', y=feature, data=data)
    plt.title(f'{feature} by Outcome')
    plt.show()

"""3.2. Violin Plots

* Use violin plots to show the distribution of data and density by species.
"""

for feature in features:
    plt.figure(figsize=(8, 6))
    sns.violinplot(x='Outcome', y=feature, data=data)
    plt.title(f'{feature} Distribution by Outcome')
    plt.show()

"""# **4. Advanced Visualization**
4.1. Correlation Heatmap

* Analyze correlations between numerical features.
"""

corr = data[features].corr()

plt.figure(figsize=(8, 6))
sns.heatmap(corr, annot=True, cmap='coolwarm', fmt='.2f', vmin=-1, vmax=1)
plt.title('Correlation Heatmap of Diabetes Features')
plt.show()

"""4.2. KDE (Kernel Density Estimate) Plots

* Explore the distribution of features using KDE plots.
"""

for feature in features:
    plt.figure(figsize=(8, 6))
    sns.kdeplot(data=data, x=feature, hue='Outcome', fill=True)
    plt.title(f'{feature} KDE Plot by Outcome')
    plt.show()

"""# Modeling

Modeling
"""

from sklearn.neighbors import KNeighborsClassifier
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import confusion_matrix

# label_encoder = LabelEncoder()
# df['Species'] = label_encoder.fit_transform(df['Species'])

data["Outcome"].unique()

data['Outcome']

Outcome = data['Outcome'].value_counts().reset_index()
Outcome

# - split data test dan training -
y = data['Outcome']
x = data.drop('Outcome',axis=1)
x_train, x_test , y_train , y_test = train_test_split(x,y,test_size = 0.2,random_state = 0)

# - Feature Scaling -
sc = StandardScaler()
x_train = sc.fit_transform(x_train)
x_test = sc.transform(x_test)

# - membuat model knn -
classifier = KNeighborsClassifier(n_neighbors=25)
classifier.fit(x_train, y_train)

y_pred = classifier.predict(x_test)

# - membuat Confusion Matrix -
cm = confusion_matrix(y_test, y_pred)
print('Confusion Matrix\n\n', cm)

print('\nTrue Positive(TP) = ', cm[0,0])

print('\nTrue Negative(TN) = ', cm[1,1])

print('\nFalse Positive(FP) = ', cm[0,1])

print('\nFalse Negative(FN) = ', cm[1,0])

# - menampilkan Heatmap -
cm_matrix = pd.DataFrame(data=cm, columns=['Actual nonDiabetes:0', 'Actual Diabetes:1' ],
                                 index=['Predict nonDiabetes:0', 'Predict Diabetes:1'])

sns.heatmap(cm_matrix, annot=True, fmt='d', cmap='YlGnBu')

# - menampilkan Accuracy Score -
from sklearn.metrics import confusion_matrix, classification_report, accuracy_score

print(classification_report(y_test, y_pred))
print('Accuracy score is: ', accuracy_score(y_test, y_pred))

data.head()

# deteksi diabetes
classifier.predict(sc.transform([[6,148,	72,	35,	0,	33.6,	0.627,	50]]))

"""# LGBM"""

from sklearn.ensemble import GradientBoostingClassifier
from sklearn.metrics import accuracy_score
from lightgbm import LGBMClassifier

from sklearn.ensemble import GradientBoostingClassifier

from sklearn.ensemble import GradientBoostingClassifier
from sklearn.metrics import accuracy_score
from lightgbm import LGBMClassifier

# - membuat model knn -
classifier2 = GradientBoostingClassifier()
classifier2.fit(x_train, y_train)

y_pred = classifier2.predict(x_test)

# - membuat Confusion Matrix -
cm = confusion_matrix(y_test, y_pred)
print('Confusion Matrix\n\n', cm)

print('\nTrue Positive(TP) = ', cm[0,0])

print('\nTrue Negative(TN) = ', cm[1,1])

print('\nFalse Positive(FP) = ', cm[0,1])

print('\nFalse Negative(FN) = ', cm[1,0])

# - menampilkan Heatmap -
cm_matrix = pd.DataFrame(data=cm, columns=['Actual nonDiabetes:0', 'Actual Diabetes:1' ],
                                 index=['Predict nonDiabetes:0', 'Predict Diabetes:1'])

sns.heatmap(cm_matrix, annot=True, fmt='d', cmap='YlGnBu')

# - menampilkan Accuracy Score -
from sklearn.metrics import confusion_matrix, classification_report, accuracy_score

print(classification_report(y_test, y_pred))
print('Accuracy score is: ', accuracy_score(y_test, y_pred))

import pickle
filename = 'diabetes_model.sav'
pickle.dump(classifier2, open(filename,'wb'))